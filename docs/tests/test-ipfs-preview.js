const axios = require('axios');

// Simular la funci√≥n getIPFSContent del frontend
async function getIPFSContent(hash) {
  console.log(`üîç Obteniendo contenido IPFS para hash: ${hash}`);
  
  const gateways = [
    'https://gateway.pinata.cloud/ipfs/',
    'https://ipfs.io/ipfs/',
    'https://gateway.ipfs.io/ipfs/'
  ];
  
  for (const gateway of gateways) {
    try {
      const url = gateway + hash;
      console.log(`üåê Intentando: ${url}`);
      
      const response = await axios.get(url, { timeout: 10000 });
      console.log(`‚úÖ Contenido obtenido de: ${url}`);
      return typeof response.data === 'string' ? response.data : JSON.stringify(response.data);
    } catch (error) {
      console.warn(`‚ùå Gateway fall√≥: ${gateway}`, error.message);
      continue;
    }
  }
  
  // Fallback con contenido simulado
  console.log('üìÑ Usando contenido simulado');
  return JSON.stringify({
    tipo: "acoso_laboral",
    descripcion: "Esta es una descripci√≥n de ejemplo de una denuncia de acoso laboral que ocurri√≥ en el lugar de trabajo. El incidente involucr√≥ comportamiento inapropiado por parte de un supervisor hacia un empleado.",
    fecha: new Date().toISOString(),
    metadata: {
      version: "1.0",
      plataforma: "Nucleo - Denuncias An√≥nimas",
      simulado: true
    }
  }, null, 2);
}

// Simular la funci√≥n de preview
function generatePreview(contenidoIPFS) {
  console.log('\nüìù Generando preview...');
  
  let descripcionPreview = "No se proporcion√≥ descripci√≥n";
  
  try {
    // Intentar parsear como JSON para extraer la descripci√≥n
    const jsonContent = JSON.parse(contenidoIPFS);
    console.log('‚úÖ Contenido parseado como JSON:', Object.keys(jsonContent));
    
    if (jsonContent.descripcion) {
      // Mostrar un preview de la descripci√≥n (primeros 150 caracteres)
      descripcionPreview = jsonContent.descripcion.length > 150 
        ? jsonContent.descripcion.substring(0, 150) + "..."
        : jsonContent.descripcion;
      console.log('üìÑ Preview desde campo "descripcion"');
    } else if (jsonContent.message) {
      descripcionPreview = jsonContent.message.length > 150 
        ? jsonContent.message.substring(0, 150) + "..."
        : jsonContent.message;
      console.log('üìÑ Preview desde campo "message"');
    } else {
      descripcionPreview = "Contenido IPFS disponible (haz clic en 'Ver descripci√≥n completa')";
      console.log('üìÑ Preview gen√©rico (no se encontr√≥ descripcion/message)');
    }
  } catch {
    // Si no es JSON, usar el contenido como texto plano
    descripcionPreview = contenidoIPFS.length > 150 
      ? contenidoIPFS.substring(0, 150) + "..."
      : contenidoIPFS;
    console.log('üìÑ Preview desde texto plano');
  }
  
  return descripcionPreview;
}

async function testPreviewSystem() {
  console.log('üöÄ Probando sistema de preview IPFS...\n');
  
  // Test con diferentes tipos de hashes
  const testHashes = [
    'QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG', // Hash real simple
    'QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o', // Hash real JSON
    'QmInvalidHashForTesting123456789', // Hash inv√°lido para probar fallback
  ];
  
  for (const hash of testHashes) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üß™ Probando hash: ${hash}`);
    console.log(`${'='.repeat(60)}`);
    
    try {
      const contenido = await getIPFSContent(hash);
      console.log('\nüìÑ Contenido obtenido:');
      console.log(contenido.substring(0, 200) + (contenido.length > 200 ? '...' : ''));
      
      const preview = generatePreview(contenido);
      console.log('\n‚ú® Preview generado:');
      console.log(`"${preview}"`);
      
      console.log('\nüìä Estad√≠sticas:');
      console.log(`- Contenido original: ${contenido.length} caracteres`);
      console.log(`- Preview: ${preview.length} caracteres`);
      console.log(`- Reducci√≥n: ${((1 - preview.length / contenido.length) * 100).toFixed(1)}%`);
      
    } catch (error) {
      console.error(`‚ùå Error procesando ${hash}:`, error.message);
    }
  }
  
  console.log(`\n${'='.repeat(60)}`);
  console.log('‚úÖ Pruebas completadas');
  console.log(`${'='.repeat(60)}`);
}

testPreviewSystem().catch(console.error);