// Test de diagn√≥stico completo para identificar exactamente por qu√© el historial no funciona
const { ethers } = require('ethers');

// Configuraci√≥n exacta del hook
const MANTLE_SEPOLIA_RPCS = [
  'https://mantle-sepolia.drpc.org',
  'https://rpc.sepolia.mantle.xyz',
  'https://mantle-sepolia.gateway.tenderly.co',
  'https://endpoints.omniatech.io/v1/mantle/sepolia/public',
  'https://mantle-sepolia-testnet.rpc.thirdweb.com',
];

const CONTRACT_ADDRESS = '0x7B339806c5Bf0bc8e12758D9E65b8806361b66f5';

// ABI completo del contrato
const DENUNCIA_ABI = [
  "function totalDenuncias() view returns (uint256)",
  "function obtenerDenuncia(uint256) view returns (tuple(address denunciante, string tipoAcoso, string ipfsHash, uint256 timestamp, bytes proof, uint256[] publicSignals, bool esPublica))",
  "event DenunciaCreada(address indexed denunciante, string tipoAcoso, string ipfsHash, bytes proof, uint256[] publicSignals)"
];

// Funci√≥n para probar cada RPC individualmente
async function testRPCs() {
  console.log('üîç DIAGN√ìSTICO 1: PROBANDO CADA RPC INDIVIDUALMENTE');
  console.log('='.repeat(60));
  
  const resultados = [];
  
  for (let i = 0; i < MANTLE_SEPOLIA_RPCS.length; i++) {
    const rpcUrl = MANTLE_SEPOLIA_RPCS[i];
    const rpcName = rpcUrl.split('/')[2];
    
    console.log(`\n${i + 1}. Probando RPC: ${rpcName}`);
    console.log(`   URL: ${rpcUrl}`);
    
    try {
      const provider = new ethers.JsonRpcProvider(rpcUrl);
      
      // Test 1: Conexi√≥n b√°sica
      console.log('   üîÑ Test 1: Conexi√≥n b√°sica...');
      const network = await provider.getNetwork();
      console.log(`   ‚úÖ Conectado - Chain ID: ${network.chainId}`);
      
      if (network.chainId !== BigInt(5003)) {
        console.log(`   ‚ùå Chain ID incorrecto. Esperado: 5003, Obtenido: ${network.chainId}`);
        resultados.push({ rpc: rpcName, status: 'FAIL', error: 'Chain ID incorrecto' });
        continue;
      }
      
      // Test 2: Bloque actual
      console.log('   üîÑ Test 2: Obteniendo bloque actual...');
      const blockNumber = await provider.getBlockNumber();
      console.log(`   ‚úÖ Bloque actual: ${blockNumber}`);
      
      // Test 3: C√≥digo del contrato
      console.log('   üîÑ Test 3: Verificando contrato...');
      const code = await provider.getCode(CONTRACT_ADDRESS);
      if (code === '0x') {
        console.log(`   ‚ùå Contrato no encontrado en ${CONTRACT_ADDRESS}`);
        resultados.push({ rpc: rpcName, status: 'FAIL', error: 'Contrato no encontrado' });
        continue;
      }
      console.log(`   ‚úÖ Contrato encontrado - Tama√±o del c√≥digo: ${code.length} bytes`);
      
      // Test 4: Funci√≥n totalDenuncias
      console.log('   üîÑ Test 4: Llamando totalDenuncias...');
      const contract = new ethers.Contract(CONTRACT_ADDRESS, DENUNCIA_ABI, provider);
      const total = await contract.totalDenuncias();
      console.log(`   ‚úÖ Total de denuncias: ${total}`);
      
      // Test 5: Obtener primera denuncia (si existe)
      if (Number(total) > 0) {
        console.log('   üîÑ Test 5: Obteniendo primera denuncia...');
        const denuncia = await contract.obtenerDenuncia(0);
        console.log(`   ‚úÖ Primera denuncia obtenida:`);
        console.log(`      - Tipo: ${denuncia.tipoAcoso}`);
        console.log(`      - Denunciante: ${denuncia.denunciante.slice(0, 10)}...`);
        console.log(`      - IPFS: ${denuncia.ipfsHash.slice(0, 20)}...`);
      } else {
        console.log('   ‚ö†Ô∏è Test 5: No hay denuncias para probar');
      }
      
      resultados.push({ 
        rpc: rpcName, 
        status: 'SUCCESS', 
        blockNumber, 
        totalDenuncias: Number(total),
        contractSize: code.length
      });
      
      console.log(`   üéâ RPC ${rpcName} - TODOS LOS TESTS PASARON`);
      
    } catch (error) {
      console.log(`   ‚ùå Error en RPC ${rpcName}: ${error.message}`);
      resultados.push({ rpc: rpcName, status: 'FAIL', error: error.message });
    }
  }
  
  return resultados;
}

// Funci√≥n para probar el procesamiento secuencial
async function testProcesamiento() {
  console.log('\nüîç DIAGN√ìSTICO 2: PROBANDO PROCESAMIENTO SECUENCIAL');
  console.log('='.repeat(60));
  
  try {
    // Usar el primer RPC que funcione
    let provider = null;
    for (const rpcUrl of MANTLE_SEPOLIA_RPCS) {
      try {
        provider = new ethers.JsonRpcProvider(rpcUrl);
        const network = await provider.getNetwork();
        if (network.chainId === BigInt(5003)) {
          console.log(`‚úÖ Usando RPC: ${rpcUrl.split('/')[2]}`);
          break;
        }
      } catch (error) {
        continue;
      }
    }
    
    if (!provider) {
      throw new Error('No se pudo conectar a ning√∫n RPC');
    }
    
    const contract = new ethers.Contract(CONTRACT_ADDRESS, DENUNCIA_ABI, provider);
    const total = await contract.totalDenuncias();
    const totalNumber = Number(total);
    
    console.log(`üìä Total de denuncias a procesar: ${totalNumber}`);
    
    if (totalNumber === 0) {
      console.log('‚ö†Ô∏è No hay denuncias para procesar');
      return { success: true, denuncias: [] };
    }
    
    // Procesar las primeras 3 denuncias con diferentes estrategias
    const maxToTest = Math.min(totalNumber, 3);
    console.log(`üîÑ Procesando las primeras ${maxToTest} denuncias...`);
    
    const resultados = [];
    
    // Estrategia 1: Sin delay
    console.log('\nüìã Estrategia 1: Sin delay entre llamadas');
    try {
      const promesas = [];
      for (let i = 0; i < maxToTest; i++) {
        promesas.push(contract.obtenerDenuncia(i));
      }
      const resultadosSimultaneos = await Promise.all(promesas);
      console.log(`‚úÖ Estrategia 1 exitosa: ${resultadosSimultaneos.length} denuncias obtenidas`);
    } catch (error) {
      console.log(`‚ùå Estrategia 1 fall√≥: ${error.message}`);
      
      // Estrategia 2: Con delay
      console.log('\nüìã Estrategia 2: Con delay de 500ms entre llamadas');
      try {
        for (let i = 0; i < maxToTest; i++) {
          console.log(`   üîÑ Obteniendo denuncia ${i + 1}/${maxToTest}`);
          const denuncia = await contract.obtenerDenuncia(i);
          resultados.push({
            id: i,
            tipoAcoso: denuncia.tipoAcoso,
            denunciante: denuncia.denunciante,
            ipfsHash: denuncia.ipfsHash,
            timestamp: new Date(Number(denuncia.timestamp) * 1000)
          });
          console.log(`   ‚úÖ Denuncia ${i} obtenida: ${denuncia.tipoAcoso}`);
          
          if (i < maxToTest - 1) {
            console.log(`   ‚è≥ Esperando 500ms...`);
            await new Promise(resolve => setTimeout(resolve, 500));
          }
        }
        console.log(`‚úÖ Estrategia 2 exitosa: ${resultados.length} denuncias obtenidas`);
      } catch (error2) {
        console.log(`‚ùå Estrategia 2 tambi√©n fall√≥: ${error2.message}`);
        throw error2;
      }
    }
    
    return { success: true, denuncias: resultados };
    
  } catch (error) {
    console.log(`‚ùå Error en procesamiento: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// Funci√≥n para probar el listener de eventos
async function testListener() {
  console.log('\nüîç DIAGN√ìSTICO 3: PROBANDO LISTENER DE EVENTOS');
  console.log('='.repeat(60));
  
  try {
    // Usar el primer RPC que funcione
    let provider = null;
    for (const rpcUrl of MANTLE_SEPOLIA_RPCS) {
      try {
        provider = new ethers.JsonRpcProvider(rpcUrl);
        const network = await provider.getNetwork();
        if (network.chainId === BigInt(5003)) {
          console.log(`‚úÖ Usando RPC: ${rpcUrl.split('/')[2]}`);
          break;
        }
      } catch (error) {
        continue;
      }
    }
    
    if (!provider) {
      throw new Error('No se pudo conectar a ning√∫n RPC');
    }
    
    const contract = new ethers.Contract(CONTRACT_ADDRESS, DENUNCIA_ABI, provider);
    
    // Test 1: Crear filtro de eventos
    console.log('üîÑ Test 1: Creando filtro de eventos...');
    const filter = contract.filters.DenunciaCreada();
    console.log('‚úÖ Filtro de eventos creado');
    
    // Test 2: Buscar eventos hist√≥ricos
    console.log('üîÑ Test 2: Buscando eventos hist√≥ricos...');
    const currentBlock = await provider.getBlockNumber();
    const startBlock = Math.max(0, currentBlock - 1000);
    
    console.log(`   Buscando desde bloque ${startBlock} hasta ${currentBlock}`);
    const eventos = await contract.queryFilter(filter, startBlock, currentBlock);
    console.log(`‚úÖ Encontrados ${eventos.length} eventos hist√≥ricos`);
    
    if (eventos.length > 0) {
      console.log('üìã Primeros eventos encontrados:');
      eventos.slice(0, 3).forEach((evento, index) => {
        const args = evento.args;
        console.log(`   ${index + 1}. Bloque ${evento.blockNumber}:`);
        console.log(`      - Tipo: ${args.tipoAcoso}`);
        console.log(`      - Denunciante: ${args.denunciante.slice(0, 10)}...`);
      });
    }
    
    // Test 3: Configurar listener (simulado)
    console.log('üîÑ Test 3: Configurando listener...');
    let listenerFunciona = false;
    
    const handleEvent = (...args) => {
      console.log('üÜï Evento detectado:', args);
      listenerFunciona = true;
    };
    
    contract.on('DenunciaCreada', handleEvent);
    console.log('‚úÖ Listener configurado (no se detectar√°n eventos nuevos en este test)');
    
    // Limpiar listener
    contract.removeAllListeners('DenunciaCreada');
    
    return { success: true, eventosHistoricos: eventos.length };
    
  } catch (error) {
    console.log(`‚ùå Error en listener: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// Funci√≥n principal de diagn√≥stico
async function diagnosticoCompleto() {
  console.log('üéØ DIAGN√ìSTICO COMPLETO DEL HISTORIAL SIN METAMASK');
  console.log('='.repeat(70));
  console.log(`Fecha: ${new Date().toLocaleString()}`);
  console.log(`Contrato: ${CONTRACT_ADDRESS}`);
  console.log(`RPCs a probar: ${MANTLE_SEPOLIA_RPCS.length}`);
  console.log('='.repeat(70));
  
  const resultados = {
    rpcs: [],
    procesamiento: null,
    listener: null,
    resumen: {
      rpcsExitosos: 0,
      procesamientoExitoso: false,
      listenerExitoso: false,
      denunciasEncontradas: 0
    }
  };
  
  try {
    // Diagn√≥stico 1: RPCs
    resultados.rpcs = await testRPCs();
    resultados.resumen.rpcsExitosos = resultados.rpcs.filter(r => r.status === 'SUCCESS').length;
    
    // Diagn√≥stico 2: Procesamiento
    resultados.procesamiento = await testProcesamiento();
    resultados.resumen.procesamientoExitoso = resultados.procesamiento.success;
    if (resultados.procesamiento.denuncias) {
      resultados.resumen.denunciasEncontradas = resultados.procesamiento.denuncias.length;
    }
    
    // Diagn√≥stico 3: Listener
    resultados.listener = await testListener();
    resultados.resumen.listenerExitoso = resultados.listener.success;
    
    // Resumen final
    console.log('\nüéâ RESUMEN DEL DIAGN√ìSTICO');
    console.log('='.repeat(70));
    console.log(`üìä RPCs exitosos: ${resultados.resumen.rpcsExitosos}/${MANTLE_SEPOLIA_RPCS.length}`);
    console.log(`üìä Procesamiento: ${resultados.resumen.procesamientoExitoso ? '‚úÖ EXITOSO' : '‚ùå FALL√ì'}`);
    console.log(`üìä Listener: ${resultados.resumen.listenerExitoso ? '‚úÖ EXITOSO' : '‚ùå FALL√ì'}`);
    console.log(`üìä Denuncias encontradas: ${resultados.resumen.denunciasEncontradas}`);
    
    // Diagn√≥stico del problema
    console.log('\nüîç DIAGN√ìSTICO DEL PROBLEMA:');
    
    if (resultados.resumen.rpcsExitosos === 0) {
      console.log('‚ùå PROBLEMA CR√çTICO: Ning√∫n RPC funciona');
      console.log('   Posibles causas:');
      console.log('   ‚Ä¢ Problemas de conectividad a internet');
      console.log('   ‚Ä¢ Todos los RPCs de Mantle Sepolia est√°n ca√≠dos');
      console.log('   ‚Ä¢ Firewall bloqueando las conexiones');
    } else if (!resultados.resumen.procesamientoExitoso) {
      console.log('‚ùå PROBLEMA: Los RPCs funcionan pero el procesamiento falla');
      console.log('   Posibles causas:');
      console.log('   ‚Ä¢ Rate limiting en los RPCs');
      console.log('   ‚Ä¢ Problemas con el ABI del contrato');
      console.log('   ‚Ä¢ Errores en la l√≥gica de procesamiento');
    } else if (resultados.resumen.denunciasEncontradas === 0) {
      console.log('‚ö†Ô∏è ADVERTENCIA: Todo funciona pero no hay denuncias');
      console.log('   Posibles causas:');
      console.log('   ‚Ä¢ El contrato es nuevo y no tiene denuncias');
      console.log('   ‚Ä¢ Las denuncias est√°n en otro contrato');
      console.log('   ‚Ä¢ Problemas con la funci√≥n obtenerDenuncia');
    } else {
      console.log('‚úÖ TODO FUNCIONA CORRECTAMENTE');
      console.log(`   Se encontraron ${resultados.resumen.denunciasEncontradas} denuncias`);
      console.log('   El problema debe estar en el frontend de React');
    }
    
    // Recomendaciones
    console.log('\nüí° RECOMENDACIONES:');
    
    if (resultados.resumen.rpcsExitosos > 0 && resultados.resumen.procesamientoExitoso) {
      console.log('1. ‚úÖ El backend funciona correctamente');
      console.log('2. üîç Revisar el hook de React para errores');
      console.log('3. üîç Verificar que el componente ListaDenuncias use el hook correctamente');
      console.log('4. üîç Revisar la consola del navegador para errores de JavaScript');
      console.log('5. üîç Verificar que no haya errores de CORS');
    } else {
      console.log('1. ‚ùå Hay problemas en el backend que deben solucionarse primero');
      console.log('2. üîß Revisar la conectividad de red');
      console.log('3. üîß Probar con diferentes RPCs');
      console.log('4. üîß Verificar la configuraci√≥n del contrato');
    }
    
    return resultados;
    
  } catch (error) {
    console.log(`\nüí• ERROR CR√çTICO EN EL DIAGN√ìSTICO: ${error.message}`);
    return null;
  }
}

// Ejecutar diagn√≥stico
diagnosticoCompleto()
  .then(resultados => {
    if (resultados) {
      console.log('\n' + '='.repeat(70));
      console.log('üéØ DIAGN√ìSTICO COMPLETADO');
      
      if (resultados.resumen.rpcsExitosos > 0 && resultados.resumen.procesamientoExitoso) {
        console.log('üéâ RESULTADO: El sistema backend funciona correctamente');
        console.log('üîç SIGUIENTE PASO: Revisar el frontend de React');
      } else {
        console.log('‚ùå RESULTADO: Hay problemas en el sistema backend');
        console.log('üîß SIGUIENTE PASO: Solucionar los problemas identificados');
      }
      
      console.log('='.repeat(70));
    }
  })
  .catch(error => {
    console.error('\nüí• ERROR FATAL:', error.message);
  });